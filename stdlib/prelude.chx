;;;; Copyright (c) 2023, Antonie Blom
;;;;
;;;; Permission to use, copy, modify, and/or distribute this software for any
;;;; purpose with or without fee is hereby granted, provided that the above
;;;; copyright notice and this permission notice appear in all copies.
;;;;
;;;; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
;;;; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
;;;; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
;;;; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
;;;; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
;;;; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
;;;; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(defmacro defun (: name args body) `(def ,name (fn ,args ,@body)))

(defmacro if   (c t e) `(cond (,c ,t) (true ,e)))
(defmacro when   (c t) `(cond (,c ,t)))
(defmacro unless (c t) `(cond (,c ()) (true ,t)))
(defun    not      (x)  (cond (x false) (true true)))
(defmacro and    (a b) `(if ,a   ,b false))
(defmacro or     (a b) `(if ,a true    ,b))

(defmacro do body `(let () ,@body))

(defun any-of? (ty-in types)
  (case types
    ((: ty tys) (or (= ty-in ty) (any-of? ty-in tys)))
    (()         false)))
(defmacro check-type (: symbol types)
 `(unless (any-of? (type-of ,symbol) (list ,@types))
    (throw ETYPE (format "`{}' must have type {}" ',symbol (unsafe-join (unsafe-map show ',types) " or ")))))

(def nil ())

(def List      (type-of '(0)))
(def ID        (type-of 'a))
(def Int       (type-of 0))
(def Double    (type-of 0.0))
(def Bool      (type-of true))
(def Func      (type-of (fn () ())))
(def ExtFunc   (type-of =))
(def Quote     (type-of ''0))
(def BackQuote (type-of '`0))
(def String    (type-of ""))
(def Env       (type-of ((fn () (env)))))

(defun const (e)
  (fn args e))

(defsym iota
  (var _iota 0)
  (defget
    (let ((res _iota))
      (case res
        ((no msg) (throw no msg))
        (n
          (try
            (set _iota (+ n 1))
            (catch EOVERFLOW
              (set _iota (list errno errmsg))))
          n))))
  (defset
    (check-type value Int)
    (set _iota value)))

(defun unsafe-map (f xs)
  (case xs
    ((: z zs) (: (f z) (unsafe-map f zs)))
    (() ())))
(defun map (f xs)
  (check-type f Func ExtFunc)
  (check-type xs List)
  (unsafe-map f xs))

(defun unsafe-mapc (f xs)
  (case xs
    ((: z zs)
      (f z)
      (unsafe-mapc f zs))
    (() ())))
(defun mapc (f xs)
  (check-type f Func ExtFunc)
  (check-type xs List)
  (unsafe-mapc f xs))

(defun head (xs)
  (check-type xs List)
  (let (((: t _) xs)) t))
(defun tail (xs)
  (check-type xs List)
  (let (((: _ ts) xs)) ts))
(defun unsafe-last ((: x xs))
  (case xs
    (() x)
    (_  (unsafe-last xs))))
(defun last (xs)
  (check-type xs List)
  (unsafe-last xs))

(defun list args args)

(defun filter (p xs)
  (check-type p Func ExtFunc)
  (check-type xs List)
  (reverse (foldl (fn (ts t) (if (p t) (: t ts) ts)) () xs)))

(defun unsafe-any? (p xs)
  (case xs
    ((: y ys) (or (p y) (unsafe-any? p ys)))
    (() false)))
(defun any? (p xs)
  (check-type p Func ExtFunc)
  (check-type xs List)
  (unsafe-any? p xs))

(defun unsafe-all? (p xs)
  (case xs
    ((: y ys) (and (p y) (unsafe-all? p ys)))
    (() true)))
(defun all? (p xs)
  (check-type p Func ExtFunc)
  (check-type xs List)
  (unsafe-all? p xs))

(defun unsafe-foldr (f start lst)
  (case lst
    ((: z zs) (f z (unsafe-foldr f start zs)))
    (() start)))
(defun foldr (f start lst)
  (check-type f Func ExtFunc)
  (check-type lst List)
  (unsafe-foldr f start lst))

(defun unsafe-foldl (f start lst)
  (case lst
    ((: z zs) (unsafe-foldl f (f start z) zs))
    (() start)))
(defun foldl (f start lst)
  (check-type f Func ExtFunc)
  (check-type lst List)
  (unsafe-foldl f start lst))

(defun repeat (x n) (map (const x) (.. n)))

(defun element? (e xs)
  (any? (fn (x) (= e x)) xs))

(defun unsafe-strfind (e s acc)
  (cond
    ((prefix? e s) acc)
    ((= s "")      nil)
    (true          (unsafe-strfind e (substr s 1) (+ acc 1)))))
(defun unsafe-find (e xs acc)
  (case xs
    ((: y ys)
      (if (= e y)
        acc
        (unsafe-find e ys (+ acc 1))))
    (() nil)))
(defun find (e xs)
  (if (= (type-of xs) String)
    (do (check-type e String)
        (unsafe-strfind e xs 0))
    (do (check-type xs List)
        (unsafe-find e xs 0))))

(defun unsafe-strrfind (e s le ls)
  (cond
    ((> le ls)     nil)
    ((suffix? e s) (- ls le))
    (true          (unsafe-strrfind e (substr s 0 (- ls 1)) le (- ls 1)))))
(defun rev-and-len (xs rev len)
  (case xs
    ((: t ts) (rev-and-len ts (: t rev) (+ len 1)))
    (() (list rev len))))
(defun rfind (e xs)
  (if (= (type-of xs) String)
    (do (check-type e String)
        (unsafe-strrfind e xs (string-length e) (string-length xs)))
    (do (check-type xs List)
        (let* (((rev len) (rev-and-len xs () 0))
               (pos (find e rev)))
          (unless (= nil pos)
            (- (- len 1) pos))))))

(defun unsafe-zip-with (: op args)
  (case args
    ((as ()) ())
    ((() bs) ())
    (((: a as) (: b bs)) (: (op a b) (unsafe-zip-with op as bs)))))
(defun zip-with (op as bs)
  (check-type op Func ExtFunc)
  (check-type as List)
  (check-type bs List)
  (unsafe-zip-with op as bs))
(defun zip (xs ys)
  (zip-with list xs ys))

(defun ++helper (xs ys)
  (case xs
    ((: z zs) (: z (++helper zs ys)))
    (() ys)))
(defun ++ (xs ys)
  (if (= (type-of xs) String)
    (do (check-type ys String)
        (format "{}{}" xs ys))
    (do (check-type xs List)
        (check-type ys List)
        (case ys
          (() xs)
          (_  (++helper xs ys))))))

(defun concat (xs) (foldl ++ () xs))
(defun strcat (xs) (foldl ++ "" xs))
(defun append args (concat args))

(defun rev-helper (xs ys)
  (case xs
    ((: z zs) (rev-helper zs (: z ys)))
    (() ys)))
(defun reverse (xs)
  (check-type xs List)
  (rev-helper xs ()))

(defun tree-insert (x tree cmp)
  (case tree
    (() (list nil x nil))
    ((l v r)
      (if (< (cmp x v) 0)
        (list (tree-insert x l cmp) v r)
        (list l v (tree-insert x r cmp))))))

(defun list-to-tree (lst cmp)
  (foldl (fn (a b) (tree-insert b a cmp)) () lst))

(defun tree-to-list (tree res)
  (case tree
    (()      res)
    ((l v r) (tree-to-list l (: v (tree-to-list r res))))))

(defun compare (a b)
  (cond
    ((< a b) -1)
    ((> a b)  1)
    (true     0)))

(defun sort-with (lst cmp)
  (check-type lst List)
  (check-type cmp Func ExtFunc)
  (tree-to-list (list-to-tree lst cmp) ()))
(defun sort (xs) (sort-with xs compare))
(defun sort-by (xs key)
  (check-type key Func ExtFunc)
  (let ((tups (map (fn (x) (list x (key x))) xs)))
    (map (fn ((a b)) a) (sort-with tups (fn ((al bl) (ar br)) (compare bl br))))))

(defun length (xs) (foldl (fn (l _) (+ 1 l)) 0 xs))

(defun unsafe-!! (xs i orig-i)
  (case xs
    ((: y ys) (if (= i 0) y (unsafe-!! ys (- i 1) orig-i)))
    (() (throw EINDEX (format "index {} out of bounds" orig-i)))))
(defun !! (xs i)
  (check-type xs List)
  (check-type i Int)
  (when (< i 0)
    (throw EINDEX (format "expected non-negative index (got {})" i)))
  (unsafe-!! xs i i))

(defun list-prefix? (pfx arg)
  (case pfx
    ((: p ps)
      (case arg
        ((: a as) (and (= p a) (list-prefix? ps as)))
        (()       false)))
    (() true)))
(defun prefix? (pfx arg)
  (if (= (type-of pfx) String)
    (do (check-type arg String)
        (let ((n (string-length pfx)))
          (and (<= n (string-length arg)) (= pfx (substr arg 0 n)))))
    (do (check-type pfx List)
        (check-type arg List)
        (list-prefix? pfx arg))))

(defun suffix? (sfx arg)
  (if (= (type-of sfx) String)
    (do (check-type arg String)
        (let ((n (string-length sfx)) (m (string-length arg)))
          (and (<= n m) (= sfx (substr arg (- m n))))))
    (do (check-type sfx List)
        (check-type arg List)
        (list-prefix? (reverse sfx) (reverse arg)))))

(defun show (arg) (format "{!s}" arg))
(defun repr (arg) (format "{!r}" arg))

(defun unsafe-split (s at)
  (case (find at s)
    (() (list s))
    (n  (: (substr s 0 n) (unsafe-split (substr s (+ n (string-length at))) at)))))
(defun split (s at)
  (check-type s String)
  (check-type at String)
  (when (= "" at)
    (throw EVALUE "cannot split on empty string"))
  (unsafe-split s at))

(defun unsafe-join (xs j)
  (case xs
    ((: y ys)
      (if (= () ys)
        y
        (format "{}{}{}" y j (unsafe-join ys j))))
    (()       "")))
(defun join (xs j)
  (check-type xs List)
  (check-type j String)
  (map (fn (x) (check-type x String)) xs)
  (unsafe-join xs j))

(defun read () (read-from stdin))
(defun print (arg) (print-to stdout arg))
(defun put (arg) (put-to stdout arg))
(defun putf args (apply putf-to (: stdout args)))
(defun get-line () (get-line-from stdin))
(defun get-byte () (get-byte-from stdin))

(defun sum (args) (foldl + 0 args))
(defun product (args) (foldl * 1 args))

(defun ~ (x) (- 0 x))

(defun ..helper (from to step fin acc)
  (if (fin from to)
    acc
    (..helper from (- to step) step fin (: to acc))))
(defun .. args
  (case args
    ((from to)
      (check-type from Int)
      (check-type to Int)
      (if (<= from to)
        (..helper from to  1 > ())
        (..helper from to -1 < ())))
    ((n)
      (check-type n Int)
      (cond
        ((> n 0) (..helper 1 n 1 > ()))
        ((= n 0) ())
        (true    (throw EVALUE "`n' must be non-negative"))))))

(defun unsafe-iterate (f x n)
  (if (= n 0)
    x
    (unsafe-iterate f (f x) (- n 1))))
(defun iterate (f x n)
  (when (< n 0)
    (throw EVALUE (format "expected non-negative iteration count (got {})" n)))
  (unsafe-iterate f x n))

(defun maximum (lst)
  (check-type lst List)
  (let (((: x xs) lst))
    (foldl (fn (a b) (if (>= a b) a b)) x xs)))
(defun minimum (lst)
  (check-type lst List)
  (let (((: x xs) lst))
    (foldl (fn (a b) (if (<= a b) a b)) x xs)))

(defun max args (maximum args))
(defun min args (minimum args))

(defun clamp (x a b)
  (check-type x Int Double)
  (check-type a Int Double)
  (check-type b Int Double)
  (min (max x a) b))
(defun lerp (a b t)
  (check-type a Int Double)
  (check-type b Int Double)
  (check-type t Int Double)
  (+ (* a (- 1 t)) (* b t)))
