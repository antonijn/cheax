; Copyright (c) 2022, Antonie Blom
;
; Permission to use, copy, modify, and/or distribute this software for any
; purpose with or without fee is hereby granted, provided that the above
; copyright notice and this permission notice appear in all copies.
;
; THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
; WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
; MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
; ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
; WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
; ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF
; OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

(new-error-code EASSERT)

(var fail-fatal true)

(var has-failed false)
(var test-indent-level 0)

(defun indent (msg)
  (let ((ind (join (map (const "  ") (.. test-indent-level)) ""))
        (lines (split msg "\n")))
    (join (map (fn (line) (++ ind line)) lines) "\n")))

(defun put-test-msg (msg)
  (put (indent msg))
  (put "\n"))

(defun fail-test (info msg)
  (put-test-msg info)
  (unless (= nil msg)
    (put-test-msg msg))
  (set has-failed true)
  (when fail-fatal
    (throw EASSERT (if (= nil msg) info (format "{}; {}" info msg)))))

(defun assert-true args
  (case args
    ((p) (assert-true p nil))
    ((p msg)
      (unless p
        (fail-test "assertion failed" msg)))))

(defun assert-false args
  (case args
    ((p) (assert-false p nil))
    ((p msg)
      (when p
        (fail-test "assertion failed" msg)))))

(defun assert-eq args
  (case args
    ((a b) (assert-eq a b nil))
    ((a b msg)
      (unless (= a b)
        (fail-test (format "equality assertion failed: {!r} not equal to {!r}" a b) msg)))))

(defmacro assert-error args
  (case args
    ((err cmd) `(assert-error ,err ,cmd nil))
    ((err cmd msg)
     `(let ((_msg ,msg))
        (try
          (do
            ,cmd
            (fail-test (format "error assertion failed: expected {}, got nothing" ',err) _msg))

          (catch EASSERT (throw errno errmsg))
          (catch ,err ())
          (catch errno (fail-test (format "error assertion failed: expected {}, got {}" ',err errno) _msg)))))))

(defun assert-type args
  (case args
    ((val ty) (assert-type val ty nil))
    ((val ty msg)
      (unless (= (type-of val) ty)
        (fail-test (format "type assertion failed: expected {}, got {}" ty (type-of val)) msg)))))

(defmacro test (: name body)
 `(let ((_name ,name) (prev-has-failed has-failed))
    (set has-failed false)
    (put-test-msg (format "running test: {}" _name))
    (set test-indent-level (+ test-indent-level 1))
    (try
      (do
        ,@body)
      (finally
        (set test-indent-level (- test-indent-level 1))
        (put-test-msg (format "test {}!" (if has-failed "failed" "succesful") _name))))
    (set has-failed prev-has-failed)))

(defun assert-arg-count-helper (f fname count msg)
  (case count
    ((least most)
      (type-assert least Int)
      (type-assert most Int)
      (when (or (> least most) (< least 0))
        (throw EVALUE "invalid arg count specification"))
      (when (> least 0)
        (assert-error EMATCH (apply f (.. (- least 1))) msg))
      (when (< most int-max)
        (assert-error EMATCH (apply f (.. (+ most 1))) msg)))
    (n (assert-arg-count-helper f fname (list n n) msg))))

(defmacro assert-arg-count args
  (case args
    ((f count)     `(assert-arg-count-helper ,f ',f ,count nil))
    ((f count msg) `(assert-arg-count-helper ,f ',f ,count ,msg))))

(def prototypes (list (.. 10) () 'foo 42 0.5 true list + ''bar '`qux "string" "" ((fn () (env)))))
(def all-types (list List ID Int Double Bool Func ExtFunc Quote BackQuote String Env))

; e.g.
; (cart-prod '((1 2) (a b))) => ((1 a) (1 b) (2 a) (2 b))
(defun cart-prod (xs)
  (case xs
    (() '(()))
    ((: as rs)
      (case as
        (() ())
        ((: t ts) (++ (map (fn (ys) (: t ys)) (cart-prod rs)) (cart-prod (: ts rs))))))))

(defun wrong-type-lists-helper (types-list)
  (case types-list
    (() ())
    ((: t ts)
      (++
        (cart-prod (: (filter (fn (x) (not (element? x t))) all-types) ts))
        (concat (map (fn (xs) (map (fn (type) (: type xs)) t)) (wrong-type-lists-helper ts)))))))
(defun wrong-type-lists (type-list)
  (wrong-type-lists-helper (map (fn (t) (if (= (type-of t) List) t (list t))) type-list)))

(defun wrong-arg-lists (type-list)
  (concat
    (map
      (fn (wtl)
        (cart-prod
          (map
            (fn (wt) (filter (fn (proto) (= (type-of proto) wt)) prototypes))
            wtl)))
    (wrong-type-lists type-list))))

(defun assert-takes-helper (f fname type-list msg)
  (map
    (fn (arg-list)
      (assert-error ETYPE (apply f arg-list)
        (let ((gen-msg (format "arguments {} should be invalid for ({})" arg-list fname)))
          (if (= nil msg) gen-msg (format "{}; {}" gen-msg msg)))))
  (wrong-arg-lists type-list)))

(defmacro assert-takes args
  (case args
    ((f type-list)     `(assert-takes-helper ,f ',f ,type-list nil))
    ((f type-list msg) `(assert-takes-helper ,f ',f ,type-list ,msg))))

(defun assert-takes-only-helper (f fname type-list msg)
  (assert-takes-helper f fname type-list msg)
  (assert-arg-count-helper f fname (length type-list) msg))

(defmacro assert-takes-only args
  (case args
    ((f type-list)     `(assert-takes-only-helper ,f ',f ,type-list nil))
    ((f type-list msg) `(assert-takes-only-helper ,f ',f ,type-list ,msg))))

(defun testing-done ()
  (exit (if has-failed 1 0)))
