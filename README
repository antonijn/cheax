CHEAX is the name of a lisp dialect along with its interpreter.

It is influenced by Haskell and is a very minimal lisp. It is meant to be
embedded into other applications and, importantly, allows variables in CHEAX to
be synchronized with variables in C through the cheax_sync() family of
functions.

Some of the terminology in lisp is replaced with modern equivalents. The term
cons is no longer used except in the interpreter itself, and is replaced by the
word 'list', or the ':' operator:

  > (: 1 '(2 3))
  (1 2 3)

The syntax of let has changed:

  > (let i 3 (* 2 i))
  6

As far as I know it's one of the few lisps that supports pattern-matching. For
instance, head (car) and tail (cdr) are implemented as follows:

  (defun head ((: x _)) x)
  (defun tail ((: _ xs)) xs)

Calling (head '(1 2 3)) will match ((1 2 3)) with ((: x _)), which in turn
matches (1 2 3) with (: x _), which results in x = 1. This allows for some very
concise syntax. Also it allows for a case expression:

  > (case '(1 2 3)
      (()       ())
      ((: x xs) (++ xs (list x))))
  (2 3 1)

